on: [push, pull_request]

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }} ${{ matrix.config.v8 }})

    strategy:
      fail-fast: false
      matrix:
        config:
        - { os: windows-latest, r: 'release', args: "--no-manual"}
        - { os: macOS-latest, r: 'release', args: "--no-manual"}
        - { os: macOS-latest, r: 'release', args: "--no-manual", no_node: true}
        - { os: ubuntu-latest, r: 'oldrel', v8: "libnode-dev", args: "--no-manual"}
        - { os: ubuntu-latest, r: 'release', v8: "libnode-dev", http-user-agent: 'release'}
        - { os: ubuntu-18.04, r: 'release', v8: "libv8-dev"}
        - { os: ubuntu-latest, r: 'devel', v8: "libnode-dev", args: "--no-manual"}
    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      cache-version: v3

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v1
        if: matrix.config.no_node == false

      - name: install mapshaper node lib
        if: matrix.config.no_node == false
        run: npm install -g mapshaper

      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}
          use-public-rspm: true

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), "depends.Rds", version = 2)
        shell: Rscript {0}

      - name: Cache R packages
        uses: actions/cache@v2
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-${{ env.cache-version }}-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-${{ env.cache-version }}

      - name: install macOS system dependencies
        if: runner.os == 'macOS'
        continue-on-error: true
        run: |
          brew install pkg-config gdal openssl udunits v8 protobuf

      - name: Install remotes package
        run: Rscript -e "install.packages('remotes')"

      - name: Install system dependencies
        if: runner.os == 'Linux'
        env:
          RHUB_PLATFORM: linux-x86_64-ubuntu-gcc
        run: |
          Rscript -e "remotes::install_github('r-hub/sysreqs')"
          sysreqs=$(Rscript -e "cat(sysreqs::sysreq_commands('DESCRIPTION'))")
          sudo add-apt-repository -y ppa:ubuntugis/ubuntugis-unstable
          sudo -s eval "$sysreqs"

          # install spatial dependencies
          sudo apt update
          sudo apt install \
            libudunits2-dev \
            libgdal-dev \
            libgeos-dev \
            libproj-dev \
            ${{ matrix.config.v8 }}

      - name: Install dependencies
        run: |
          remotes::install_deps(dependencies = TRUE)
          remotes::install_cran('rcmdcheck')
        shell: Rscript {0}

      - name: Check
        env:
          TMPDIR: ${{ runner.temp }}
        run: |
          rcmdcheck::rcmdcheck(args = "${{ matrix.config.args }}", error_on = 'warning', check_dir = 'check')
        shell: Rscript {0}


      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@master
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check

      - name: Test coverage
        if: matrix.config.os == 'macOS-latest' && matrix.config.r == 'release'
        continue-on-error: true
        run: |
          Rscript -e 'remotes::install_github("r-lib/covr@gh-actions")'
          Rscript -e 'covr::codecov(token = "${{secrets.CODECOV_TOKEN}}")'
